"use strict";
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.DevkitFileSystem = void 0;
const core_1 = require("@angular-devkit/core");
const path = require("path");
const file_system_1 = require("./file-system");
/**
 * File system that leverages the virtual tree from the CLI devkit. This file
 * system is commonly used by `ng update` migrations that run as part of the
 * Angular CLI.
 */
class DevkitFileSystem extends file_system_1.FileSystem {
    constructor(tree) {
        super();
        this.tree = tree;
        this._updateRecorderCache = new Map();
    }
    resolve(...segments) {
        // Note: We use `posix.resolve` as the devkit paths are using posix separators.
        return core_1.normalize(path.posix.resolve('/', ...segments.map(core_1.normalize)));
    }
    edit(filePath) {
        if (this._updateRecorderCache.has(filePath)) {
            return this._updateRecorderCache.get(filePath);
        }
        const recorder = this.tree.beginUpdate(filePath);
        this._updateRecorderCache.set(filePath, recorder);
        return recorder;
    }
    commitEdits() {
        this._updateRecorderCache.forEach((r) => this.tree.commitUpdate(r));
        this._updateRecorderCache.clear();
    }
    exists(fileOrDirPath) {
        // The devkit tree does not expose an API for checking whether a given
        // directory exists. It throws a specific error though if a directory
        // is being read as a file. We use that to check if a directory exists.
        try {
            return this.tree.get(fileOrDirPath) !== null;
        }
        catch (e) {
            if (e instanceof core_1.PathIsDirectoryException) {
                return true;
            }
        }
        return false;
    }
    overwrite(filePath, content) {
        this.tree.overwrite(filePath, content);
    }
    create(filePath, content) {
        this.tree.create(filePath, content);
    }
    delete(filePath) {
        this.tree.delete(filePath);
    }
    read(filePath) {
        const buffer = this.tree.read(filePath);
        return buffer !== null ? buffer.toString() : null;
    }
    readDirectory(dirPath) {
        try {
            const { subdirs: directories, subfiles: files } = this.tree.getDir(dirPath);
            return { directories, files };
        }
        catch (e) {
            return { directories: [], files: [] };
        }
    }
}
exports.DevkitFileSystem = DevkitFileSystem;
//# sourceMappingURL=devkit-file-system.js.map