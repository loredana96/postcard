"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.pushToArrayProperty = void 0;
const decorators_1 = require("ng-morph/decorators");
const ts_morph_1 = require("ts-morph");
// TODO: investigate how to handle consts in descriptors that don't accept array of array type, like styleUrls
function pushToArrayProperty(classDeclaration, decoratorName, propertyName, initializer, { unique = false, forceToArray = false, } = {}) {
    var _a;
    const [decorator] = decorators_1.getDecorators(classDeclaration, {
        name: decoratorName,
    });
    const [metadata = decorator.addArgument(`{${propertyName}: []}`),] = decorator.getArguments();
    if (!ts_morph_1.Node.isObjectLiteralExpression(metadata)) {
        return;
    }
    const property = (_a = metadata.getProperty(propertyName)) !== null && _a !== void 0 ? _a : metadata.addProperty(`${propertyName}: []`);
    if (!ts_morph_1.Node.isPropertyAssignment(property)) {
        return;
    }
    if (forceToArray &&
        !ts_morph_1.Node.isArrayLiteralExpression(property.getInitializer())) {
        property.setInitializer(`[${property.getInitializer().getText()}]`);
    }
    const importsInitializer = property.getInitializer();
    if (!ts_morph_1.Node.isArrayLiteralExpression(importsInitializer)) {
        return;
    }
    if (unique &&
        importsInitializer
            .getElements()
            .some((element) => element.getText() === initializer)) {
        return;
    }
    importsInitializer.addElement(initializer);
}
exports.pushToArrayProperty = pushToArrayProperty;
//# sourceMappingURL=push-to-array-property.js.map