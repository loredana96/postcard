{"version":3,"file":"side-effect-observable.js","sourceRoot":"","sources":["../../../../../../libs/state/selections/src/lib/side-effect-observable.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,KAAK,EAAc,cAAc,EAAE,OAAO,EAA8B,MAAM,MAAM,CAAC;AAC9F,OAAO,EAAE,QAAQ,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAC;AAErD,MAAM,UAAU,0BAA0B,CACxC,mBAAmB,IAAI,OAAO,EAAiB;IAM/C,MAAM,QAAQ,GAAkB,KAAK,CACnC,gBAAgB,CAAC,IAAI,CAAC,QAAQ,EAAE,EAAE,SAAS,CAAC,cAAc,CAAC,CAAC,CAC7D,CAAC;IAEF,SAAS,oBAAoB,CAAC,OAAsB;QAClD,gBAAgB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IACjC,CAAC;IAED,SAAS,SAAS;QAChB,OAAO,QAAQ,CAAC,SAAS,EAAE,CAAC;IAC9B,CAAC;IAED,OAAO;QACL,QAAQ;QACR,oBAAoB;QACpB,SAAS;KACV,CAAC;AACJ,CAAC","sourcesContent":["import { merge, Observable, queueScheduler, Subject, Subscribable, Subscription } from 'rxjs';\nimport { mergeAll, observeOn } from 'rxjs/operators';\n\nexport function createSideEffectObservable<T>(\n  stateObservables = new Subject<Observable<T>>()\n): {\n  effects$: Observable<T>;\n  nextEffectObservable: (effect$: Observable<T>) => void;\n  subscribe: () => Subscription;\n} & Subscribable<T> {\n  const effects$: Observable<T> = merge(\n    stateObservables.pipe(mergeAll(), observeOn(queueScheduler))\n  );\n\n  function nextEffectObservable(effect$: Observable<T>): void {\n    stateObservables.next(effect$);\n  }\n\n  function subscribe(): Subscription {\n    return effects$.subscribe();\n  }\n\n  return {\n    effects$,\n    nextEffectObservable,\n    subscribe\n  };\n}\n"]}