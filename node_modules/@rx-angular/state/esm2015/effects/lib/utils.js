import { filter, pluck, shareReplay, take, takeUntil } from 'rxjs/operators';
export function isSingleShotHookNameGuard(name) {
    return !!name && typeof name === 'string' && name !== '';
}
/**
 * @internal
 * Operator to filter values for single shot observables
 */
const singleShotOperators = (o$) => o$.pipe(filter((v) => v === true), take(1), shareReplay());
/**
 * This is an operator that is used to listen to Angular lifecycle hooks.
 * It plucks a defined lefe cycle name `HookProps` and forwards values for the particular value and in the behavior of the hook e.g. single shot
 *
 * @param name
 */
export function toHook(name) {
    const operators = isSingleShotHookNameGuard(name)
        ? singleShotOperators
        : (o) => o;
    return (o$) => o$.pipe(pluck(name), operators);
}
/**
 * This operator can be used to take instances that implements `OnDestroy$` and unsubscribes from the given Observable when the instances
 * `onDestroy$` Observable emits.
 *
 * @param instanceWithLifecycle
 */
export function untilDestroyed(instanceWithLifecycle) {
    return (source) => source.pipe(takeUntil(instanceWithLifecycle.onDestroy$));
}
//# sourceMappingURL=utils.js.map