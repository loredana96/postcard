{"version":3,"file":"rx-state.service.js","sourceRoot":"","sources":["../../../../../libs/state/src/lib/rx-state.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable, OnDestroy } from '@angular/core';\n// eslint-disable-next-line @nrwl/nx/enforce-module-boundaries\nimport {\n  AccumulationFn,\n  createAccumulationObservable,\n  createSideEffectObservable,\n  isKeyOf,\n  KeyCompareMap,\n  PickSlice,\n  safePluck,\n  select,\n} from '@rx-angular/state/selections';\nimport {\n  EMPTY,\n  isObservable,\n  Observable,\n  OperatorFunction,\n  Subscribable,\n  Subscription,\n  Unsubscribable,\n} from 'rxjs';\nimport { catchError, map, tap } from 'rxjs/operators';\n\nexport type ProjectStateFn<T> = (oldState: T) => Partial<T>;\nexport type ProjectValueFn<T, K extends keyof T> = (oldState: T) => T[K];\n\nexport type ProjectStateReducer<T, V> = (oldState: T, value: V) => Partial<T>;\n\nexport type ProjectValueReducer<T, K extends keyof T, V> = (\n  oldState: T,\n  value: V\n) => T[K];\n\n/**\n * @description\n * RxState is a light-weight reactive state management service for managing local state in angular.\n *\n * @example\n * Component({\n *   selector: 'app-stateful',\n *   template: `<div>{{ state$ | async | json }}</div>`,\n *   providers: [RxState]\n * })\n * export class StatefulComponent {\n *   readonly state$ = this.state.select();\n *\n *   constructor(private state: RxState<{ foo: string }>) {}\n * }\n *\n * @docsCategory RxState\n * @docsPage RxState\n */\n@Injectable()\nexport class RxState<T extends object> implements OnDestroy, Subscribable<T> {\n  private subscription = new Subscription();\n\n  private accumulator = createAccumulationObservable<T>();\n  private effectObservable = createSideEffectObservable();\n\n  /**\n   * @description\n   * The unmodified state exposed as `Observable<T>`. It is not shared, distinct or gets replayed.\n   * Use the `$` property if you want to read the state without having applied {@link stateful} to it.\n   */\n  readonly $: Observable<T> = this.accumulator.signal$;\n\n  /**\n   * @internal\n   */\n  constructor() {\n    this.subscription.add(this.subscribe());\n  }\n\n  /**\n   * @internal\n   */\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n\n  /**\n   * @description\n   *\n   * Allows to customize state accumulation function.\n   * This can be helpful to implement deep updates and tackle other immutability problems in a custom way.\n   * @example\n   *\n   * ```typescript\n   * const myAccumulator = (state: MyState, slice: Partial<MyState>) => deepCopy(state, slice);\n   *\n   * this.state.setAccumulator(myAccumulator);\n   * ```\n   */\n  setAccumulator(accumulatorFn: AccumulationFn): void {\n    this.accumulator.nextAccumulator(accumulatorFn);\n  }\n\n  /**\n   * @description\n   * Read from the state in imperative manner. Returns the state object in its current state.\n   *\n   * @example\n   * const { disabled } = state.get();\n   * if (!disabled) {\n   *   doStuff();\n   * }\n   *\n   * @return T\n   */\n  get(): T;\n\n  /**\n   * @description\n   * Read from the state in imperative manner by providing keys as parameters.\n   * Returns the part of state object.\n   *\n   * @example\n   * // Access a single property\n   *\n   * const bar = state.get('bar');\n   *\n   * // Access a nested property\n   *\n   * const foo = state.get('bar', 'foo');\n   *\n   * @return T | T[K1] | T[K1][K2]\n   */\n\n  get<K1 extends keyof T>(k1: K1): T[K1];\n  /** @internal **/\n  get<K1 extends keyof T, K2 extends keyof T[K1]>(k1: K1, k2: K2): T[K1][K2];\n  /** @internal **/\n  get<K1 extends keyof T, K2 extends keyof T[K1], K3 extends keyof T[K1][K2]>(\n    k1: K1,\n    k2: K2,\n    k3: K3\n  ): T[K1][K2][K3];\n  /** @internal **/\n  get<\n    K1 extends keyof T,\n    K2 extends keyof T[K1],\n    K3 extends keyof T[K1][K2],\n    K4 extends keyof T[K1][K2][K3]\n  >(k1: K1, k2: K2, k3: K3, k4: K4): T[K1][K2][K3][K4];\n  /** @internal **/\n  get<\n    K1 extends keyof T,\n    K2 extends keyof T[K1],\n    K3 extends keyof T[K1][K2],\n    K4 extends keyof T[K1][K2][K3],\n    K5 extends keyof T[K1][K2][K3][K4]\n  >(k1: K1, k2: K2, k3: K3, k4: K4, k5: K5): T[K1][K2][K3][K4][K5];\n  /** @internal **/\n  get<\n    K1 extends keyof T,\n    K2 extends keyof T[K1],\n    K3 extends keyof T[K1][K2],\n    K4 extends keyof T[K1][K2][K3],\n    K5 extends keyof T[K1][K2][K3][K4],\n    K6 extends keyof T[K1][K2][K3][K4][K5]\n  >(k1: K1, k2: K2, k3: K3, k4: K4, k5: K5, k6: K6): T[K1][K2][K3][K4][K5][K6];\n  /** @internal **/\n  get<\n    K1 extends keyof T,\n    K2 extends keyof T[K1],\n    K3 extends keyof T[K1][K2],\n    K4 extends keyof T[K1][K2][K3],\n    K5 extends keyof T[K1][K2][K3][K4],\n    K6 extends keyof T[K1][K2][K3][K4][K5]\n  >(\n    ...keys:\n      | [K1]\n      | [K1, K2]\n      | [K1, K2, K3]\n      | [K1, K2, K3, K4]\n      | [K1, K2, K3, K4, K5]\n      | [K1, K2, K3, K4, K5, K6]\n  ):\n    | T\n    | T[K1]\n    | T[K1][K2]\n    | T[K1][K2][K3]\n    | T[K1][K2][K3][K4]\n    | T[K1][K2][K3][K4][K5]\n    | T[K1][K2][K3][K4][K5][K6] {\n    const hasStateAnyKeys = Object.keys(this.accumulator.state).length > 0;\n    if (!!keys && keys.length) {\n      return safePluck(this.accumulator.state, keys);\n    } else {\n      return hasStateAnyKeys\n        ? this.accumulator.state\n        : (undefined as unknown as T);\n    }\n  }\n\n  /**\n   * @description\n   * Manipulate one or many properties of the state by providing a `Partial<T>` state or a `ProjectionFunction<T>`.\n   *\n   * @example\n   * // Update one or many properties of the state by providing a `Partial<T>`\n   *\n   * const partialState = {\n   *   foo: 'bar',\n   *   bar: 5\n   * };\n   * state.set(partialState);\n   *\n   * // Update one or many properties of the state by providing a `ProjectionFunction<T>`\n   *\n   * const reduceFn = oldState => ({\n   *   bar: oldState.bar + 5\n   * });\n   * state.set(reduceFn);\n   *\n   * @param {Partial<T>|ProjectStateFn<T>} stateOrProjectState\n   * @return void\n   */\n  set(stateOrProjectState: Partial<T> | ProjectStateFn<T>): void;\n\n  /**\n   * @description\n   * Manipulate a single property of the state by the property name and a `ProjectionFunction<T>`.\n   *\n   * @example\n   * const reduceFn = oldState => oldState.bar + 5;\n   * state.set('bar', reduceFn);\n   *\n   * @param {K} key\n   * @param {ProjectValueFn<T, K>} projectSlice\n   * @return void\n   */\n  set<K extends keyof T, O>(key: K, projectSlice: ProjectValueFn<T, K>): void;\n  /**\n   * @internal\n   */\n  set<K extends keyof T>(\n    keyOrStateOrProjectState: Partial<T> | ProjectStateFn<T> | K,\n    stateOrSliceProjectFn?: ProjectValueFn<T, K>\n  ): void {\n    if (\n      typeof keyOrStateOrProjectState === 'object' &&\n      stateOrSliceProjectFn === undefined\n    ) {\n      this.accumulator.nextSlice(keyOrStateOrProjectState);\n      return;\n    }\n\n    if (\n      typeof keyOrStateOrProjectState === 'function' &&\n      stateOrSliceProjectFn === undefined\n    ) {\n      this.accumulator.nextSlice(\n        keyOrStateOrProjectState(this.accumulator.state)\n      );\n      return;\n    }\n\n    if (\n      isKeyOf<T>(keyOrStateOrProjectState) &&\n      typeof stateOrSliceProjectFn === 'function'\n    ) {\n      const state: Partial<T> = {};\n      state[keyOrStateOrProjectState] = stateOrSliceProjectFn(\n        this.accumulator.state\n      );\n      this.accumulator.nextSlice(state);\n      return;\n    }\n\n    throw new Error('wrong params passed to set');\n  }\n\n  /**\n   * @description\n   * Connect an `Observable<Partial<T>>` to the state `T`.\n   * Any change emitted by the source will get merged into the state.\n   * Subscription handling is done automatically.\n   *\n   * @example\n   * const sliceToAdd$ = interval(250).pipe(mapTo({\n   *   bar: 5,\n   *   foo: 'foo'\n   * });\n   * state.connect(sliceToAdd$);\n   * // every 250ms the properties bar and foo get updated due to the emission of sliceToAdd$\n   *\n   * // Additionally you can provide a `projectionFunction` to access the current state object and do custom mappings.\n   *\n   * const sliceToAdd$ = interval(250).pipe(mapTo({\n   *   bar: 5,\n   *   foo: 'foo'\n   * });\n   * state.connect(sliceToAdd$, (state, slice) => state.bar += slice.bar);\n   * // every 250ms the properties bar and foo get updated due to the emission of sliceToAdd$. Bar will increase by\n   * // 5 due to the projectionFunction\n   */\n  connect(inputOrSlice$: Observable<Partial<T>>): void;\n\n  /**\n   * @description\n   * Connect an `Observable<V>` to the state `T`.\n   * Any change emitted by the source will get forwarded to to project function and merged into the state.\n   * Subscription handling is done automatically.\n   *\n   * You have to provide a `projectionFunction` to access the current state object and do custom mappings.\n   *\n   * @example\n   * const sliceToAdd$ = interval(250);\n   * state.connect(sliceToAdd$, (s, v) => ({bar: v}));\n   * // every 250ms the property bar get updated due to the emission of sliceToAdd$\n   *\n   */\n  connect<V>(\n    inputOrSlice$: Observable<V>,\n    projectFn: ProjectStateReducer<T, V>\n  ): void;\n  /**\n   *\n   * @description\n   * Connect an `Observable<T[K]>` source to a specific property `K` in the state `T`. Any emitted change will update\n   * this\n   * specific property in the state.\n   * Subscription handling is done automatically.\n   *\n   * @example\n   * const myTimer$ = interval(250);\n   * state.connect('timer', myTimer$);\n   * // every 250ms the property timer will get updated\n   */\n  connect<K extends keyof T>(key: K, slice$: Observable<T[K]>): void;\n  /**\n   *\n   * @description\n   * Connect an `Observable<V>` source to a specific property in the state. Additionally you can provide a\n   * `projectionFunction` to access the current state object on every emission of your connected `Observable`.\n   * Any change emitted by the source will get merged into the state.\n   * Subscription handling is done automatically.\n   *\n   * @example\n   * const myTimer$ = interval(250);\n   * state.connect('timer', myTimer$, (state, timerChange) => state.timer += timerChange);\n   * // every 250ms the property timer will get updated\n   */\n  connect<K extends keyof T, V>(\n    key: K,\n    input$: Observable<V>,\n    projectSliceFn: ProjectValueReducer<T, K, V>\n  ): void;\n  /**\n   * @internal\n   */\n  connect<K extends keyof T, V>(\n    keyOrInputOrSlice$: K | Observable<Partial<T> | V>,\n    projectOrSlices$?: ProjectStateReducer<T, V> | Observable<T[K] | V>,\n    projectValueFn?: ProjectValueReducer<T, K, V>\n  ): void {\n    if (\n      projectValueFn === undefined &&\n      projectOrSlices$ === undefined &&\n      isObservable(keyOrInputOrSlice$)\n    ) {\n      this.accumulator.nextSliceObservable(keyOrInputOrSlice$);\n      return;\n    }\n\n    if (\n      projectValueFn === undefined &&\n      typeof projectOrSlices$ === 'function' &&\n      isObservable(keyOrInputOrSlice$) &&\n      !isObservable(projectOrSlices$)\n    ) {\n      const project = projectOrSlices$;\n      const slice$ = keyOrInputOrSlice$.pipe(\n        map((v) => project(this.get(), v as V))\n      );\n      this.accumulator.nextSliceObservable(slice$);\n      return;\n    }\n\n    if (\n      projectValueFn === undefined &&\n      isKeyOf<T>(keyOrInputOrSlice$) &&\n      isObservable(projectOrSlices$)\n    ) {\n      const key = keyOrInputOrSlice$;\n      const slice$ = projectOrSlices$.pipe(\n        map((value) => ({ ...{}, [key]: value }))\n      );\n      this.accumulator.nextSliceObservable(slice$);\n      return;\n    }\n\n    if (\n      typeof projectValueFn === 'function' &&\n      isKeyOf<T>(keyOrInputOrSlice$) &&\n      isObservable(projectOrSlices$)\n    ) {\n      const key = keyOrInputOrSlice$;\n      const slice$ = projectOrSlices$.pipe(\n        map((value) => ({\n          ...{},\n          [key]: projectValueFn(this.get(), value as V),\n        }))\n      );\n      this.accumulator.nextSliceObservable(slice$);\n      return;\n    }\n\n    throw new Error('wrong params passed to connect');\n  }\n\n  /**\n   * @description\n   * Returns the state as cached and distinct `Observable<T>`. This way you don't have to think about **late\n   * subscribers**,\n   * **multiple subscribers** or **multiple emissions** of the same value\n   *\n   * @example\n   * const state$ = state.select();\n   * state$.subscribe(state => doStuff(state));\n   *\n   * @returns Observable<T>\n   */\n  select(): Observable<T>;\n\n  /**\n   * @description\n   * Returns the state as cached and distinct `Observable<A>`. Accepts arbitrary\n   * [rxjs operators](https://rxjs-dev.firebaseapp.com/guide/operators) to enrich the selection with reactive\n   *   composition.\n   *\n   * @example\n   * const profilePicture$ = state.select(\n   *  pluck('profilePicture'),\n   *  switchMap(profilePicture => mapImageAsync(profilePicture))\n   * );\n   * @param op { OperatorFunction<T, A> }\n   * @returns Observable<A>\n   */\n  select<A = T>(op: OperatorFunction<T, A>): Observable<A>;\n  /**\n   * @internal\n   */\n  select<A = T, B = A>(\n    op1: OperatorFunction<T, A>,\n    op2: OperatorFunction<A, B>\n  ): Observable<B>;\n  /**\n   * @internal\n   */\n  select<A = T, B = A, C = B>(\n    op1: OperatorFunction<T, A>,\n    op2: OperatorFunction<A, B>,\n    op3: OperatorFunction<B, C>\n  ): Observable<C>;\n  /**\n   * @internal\n   */\n  select<A = T, B = A, C = B, D = C>(\n    op1: OperatorFunction<T, A>,\n    op2: OperatorFunction<A, B>,\n    op3: OperatorFunction<B, C>,\n    op4: OperatorFunction<C, D>\n  ): Observable<D>;\n  /**\n   * @internal\n   */\n  select<A = T, B = A, C = B, D = C, E = D>(\n    op1: OperatorFunction<T, A>,\n    op2: OperatorFunction<A, B>,\n    op3: OperatorFunction<B, C>,\n    op4: OperatorFunction<C, D>,\n    op5: OperatorFunction<D, E>\n  ): Observable<E>;\n  /**\n   * @description\n   * Transform a slice of the state by providing keys and map function.\n   * Returns result of applying function to state slice as cached and distinct `Observable<V>`.\n   *\n   * @example\n   * // Project state slice\n   * const text$ = state.select(\n   *   ['query', 'results'],\n   *   ({ query, results }) => `${results.length} results found for \"${query}\"`\n   * );\n   *\n   * @return Observable<V>\n   */\n  select<K extends keyof T, V>(\n    keys: K[],\n    fn: (slice: PickSlice<T, K>) => V,\n    keyCompareMap?: KeyCompareMap<Pick<T, K>>\n  ): Observable<V>;\n  /**\n   * @description\n   * Transform a single property of the state by providing a key and map function.\n   * Returns result of applying function to state property as cached and distinct `Observable<V>`.\n   *\n   * @example\n   * // Project state based on single property\n   * const foo$ = state.select('bar', bar => `bar equals ${bar}`);\n   *\n   * @return Observable<V>\n   */\n  select<K extends keyof T, V>(k: K, fn: (val: T[K]) => V): Observable<V>;\n  /**\n   * @description\n   * Access a single property of the state by providing keys.\n   * Returns a single property of the state as cached and distinct `Observable<T[K1]>`.\n   *\n   * @example\n   * // Access a single property\n   *\n   * const bar$ = state.select('bar');\n   *\n   * // Access a nested property\n   *\n   * const foo$ = state.select('bar', 'foo');\n   *\n   * @return Observable<T[K1]>\n   */\n  select<K1 extends keyof T>(k1: K1): Observable<T[K1]>;\n  /**\n   * @internal\n   */\n  select<K1 extends keyof T, K2 extends keyof T[K1]>(\n    k1: K1,\n    k2: K2\n  ): Observable<T[K1][K2]>;\n  /**\n   * @internal\n   */\n  select<\n    K1 extends keyof T,\n    K2 extends keyof T[K1],\n    K3 extends keyof T[K1][K2]\n  >(k1: K1, k2: K2, k3: K3): Observable<T[K1][K2][K3]>;\n  /**\n   * @internal\n   */\n  select<\n    K1 extends keyof T,\n    K2 extends keyof T[K1],\n    K3 extends keyof T[K1][K2],\n    K4 extends keyof T[K1][K2][K3]\n  >(k1: K1, k2: K2, k3: K3, k4: K4): Observable<T[K1][K2][K3][K4]>;\n  /**\n   * @internal\n   */\n  select<\n    K1 extends keyof T,\n    K2 extends keyof T[K1],\n    K3 extends keyof T[K1][K2],\n    K4 extends keyof T[K1][K2][K3],\n    K5 extends keyof T[K1][K2][K3][K4]\n  >(k1: K1, k2: K2, k3: K3, k4: K4, k5: K5): Observable<T[K1][K2][K3][K4][K5]>;\n  /**\n   * @internal\n   */\n  select<\n    K1 extends keyof T,\n    K2 extends keyof T[K1],\n    K3 extends keyof T[K1][K2],\n    K4 extends keyof T[K1][K2][K3],\n    K5 extends keyof T[K1][K2][K3][K4],\n    K6 extends keyof T[K1][K2][K3][K4][K5]\n  >(\n    k1: K1,\n    k2: K2,\n    k3: K3,\n    k4: K4,\n    k5: K5,\n    k6: K6\n  ): Observable<T[K1][K2][K3][K4][K5][K6]>;\n  /**\n   * @internal\n   */\n  select<R>(\n    ...args:\n      | OperatorFunction<T, unknown>[]\n      | string[]\n      | [k: string, fn: (val: unknown) => unknown]\n      | [\n          keys: string[],\n          fn: (slice: unknown) => unknown,\n          keyCompareMap?: KeyCompareMap<T>\n        ]\n  ): Observable<T | R> {\n    return this.accumulator.state$.pipe(\n      select(...(args as Parameters<typeof select>))\n    );\n  }\n\n  /**\n   * @description\n   * Manages side-effects of your state. Provide an `Observable<any>` **side-effect** and an optional\n   * `sideEffectFunction`.\n   * Subscription handling is done automatically.\n   *\n   * @example\n   * // Directly pass an observable side-effect\n   * const localStorageEffect$ = changes$.pipe(\n   *  tap(changes => storeChanges(changes))\n   * );\n   * state.hold(localStorageEffect$);\n   *\n   * // Pass an additional `sideEffectFunction`\n   *\n   * const localStorageEffectFn = changes => storeChanges(changes);\n   * state.hold(changes$, localStorageEffectFn);\n   *\n   * @param {Observable<S>} obsOrObsWithSideEffect\n   * @param {function} [sideEffectFn]\n   */\n  hold<S>(\n    obsOrObsWithSideEffect: Observable<S>,\n    sideEffectFn?: (arg: S) => void\n  ): void {\n    const sideEffect = obsOrObsWithSideEffect.pipe(catchError((e) => EMPTY));\n    if (typeof sideEffectFn === 'function') {\n      this.effectObservable.nextEffectObservable(\n        sideEffect.pipe(tap(sideEffectFn))\n      );\n      return;\n    }\n    this.effectObservable.nextEffectObservable(sideEffect);\n  }\n\n  /**\n   * @internal\n   */\n  subscribe(): Unsubscribable {\n    const subscription = new Subscription();\n    subscription.add(this.accumulator.subscribe());\n    subscription.add(this.effectObservable.subscribe());\n    return subscription;\n  }\n}\n"]}