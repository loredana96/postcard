import { Observable } from 'rxjs';
export declare type ValuesOf<O> = O[keyof O];
export declare type KeysOf<O> = keyof O;
declare type InstanceOrType<T> = T extends abstract new (...args: any) => infer R ? R : T;
declare type InferArguments<T> = T extends (...args: infer R) => any ? R : never;
declare type Select<U, K> = K extends keyof U ? U[K] : never;
declare type ExtractString<T extends object> = Extract<keyof T, string>;
declare type FunctionParamsOrValueType<U, K, F> = InferArguments<Select<U, K>> extends never ? [F] : InferArguments<Select<U, K>>;
export declare type Actions = {};
export declare type ActionTransforms<T extends {}> = Partial<{
    [K in keyof T]: (...args: any[]) => T[K];
}>;
export declare type ActionDispatchFn<O extends unknown[]> = (...value: InstanceOrType<O>) => void;
export declare type ActionDispatchers<T extends Actions, U extends {}> = {
    [K in keyof T]: ActionDispatchFn<FunctionParamsOrValueType<U, K, Select<T, K>>>;
};
export declare type ActionObservables<T extends Actions> = {
    [K in ExtractString<T> as `${K}$`]: Observable<InstanceOrType<T[K]>>;
};
export declare type RxActions<T extends Actions, U extends {} = T> = ActionDispatchers<T, U> & ActionObservables<T> & ((slice: Partial<T>) => void) & {
    $: (props: (keyof T)[]) => Observable<ValuesOf<T>>;
};
export {};
//# sourceMappingURL=types.d.ts.map