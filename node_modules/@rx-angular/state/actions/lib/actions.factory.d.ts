import { Actions, ActionTransforms, RxActions } from './types';
import { ErrorHandler, OnDestroy } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * This class creates RxActions bound to Angular's DI life-cycles. This prevents memory leaks and optionally makes the instance reusable across the app.
 * The main function here is called `create`, optionally you can also call `destroy` to complete all action channels.
 * If the instantiator gets destroyed also the actions get destroyed automatically.
 *
 * @example
 * const factory = new RxActionFactory<{search: string}>();
 * const actions = factory.create();
 * actions.search('');
 * actions.search$.subscribe();
 */
export declare class RxActionFactory<T extends Partial<Actions>> implements OnDestroy {
    private readonly errorHandler?;
    private subjects;
    constructor(errorHandler?: ErrorHandler | undefined);
    create<U extends ActionTransforms<T> = {}>(transforms?: U): RxActions<T, U>;
    destroy(): void;
    /**
     * @internal
     * Internally used to clean up potential subscriptions to the subjects. (For Actions it is most probably a rare case but still important to care about)
     */
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<RxActionFactory<any>, [{ optional: true; }]>;
    static ɵprov: i0.ɵɵInjectableDeclaration<RxActionFactory<any>>;
}
//# sourceMappingURL=actions.factory.d.ts.map