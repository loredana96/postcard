(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('rxjs'), require('rxjs/operators')) :
    typeof define === 'function' && define.amd ? define('@rx-angular/state/selections', ['exports', 'rxjs', 'rxjs/operators'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global['rx-angular'] = global['rx-angular'] || {}, global['rx-angular'].state = global['rx-angular'].state || {}, global['rx-angular'].state.selections = {}), global.rxjs, global.rxjs.operators));
}(this, (function (exports, rxjs, operators) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2)
            for (var i = 0, l = from.length, ar; i < l; i++) {
                if (ar || !(i in from)) {
                    if (!ar)
                        ar = Array.prototype.slice.call(from, 0, i);
                    ar[i] = from[i];
                }
            }
        return to.concat(ar || Array.prototype.slice.call(from));
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    var defaultAccumulator = function (st, sl) {
        return Object.assign(Object.assign({}, st), sl);
    };
    function createAccumulationObservable(stateObservables, stateSlices, accumulatorObservable) {
        if (stateObservables === void 0) { stateObservables = new rxjs.Subject(); }
        if (stateSlices === void 0) { stateSlices = new rxjs.Subject(); }
        if (accumulatorObservable === void 0) { accumulatorObservable = new rxjs.BehaviorSubject(defaultAccumulator); }
        var signal$ = rxjs.merge(stateObservables.pipe(operators.distinctUntilChanged(), operators.mergeAll(), operators.observeOn(rxjs.queueScheduler)), stateSlices.pipe(operators.observeOn(rxjs.queueScheduler))).pipe(operators.withLatestFrom(accumulatorObservable.pipe(operators.observeOn(rxjs.queueScheduler))), operators.scan(function (state, _a) {
            var _b = __read(_a, 2), slice = _b[0], stateAccumulator = _b[1];
            return stateAccumulator(state, slice);
        }, {}), operators.tap(function (newState) { return (compositionObservable.state = newState); }, function (error) { return console.error(error); }), 
        // @Notice We catch the error here as it get lost in between `publish` and `publishReplay`. We return empty to
        operators.catchError(function (e) { return rxjs.EMPTY; }), operators.publish());
        var state$ = signal$.pipe(operators.publishReplay(1));
        var compositionObservable = {
            state: {},
            signal$: signal$,
            state$: state$,
            nextSlice: nextSlice,
            nextSliceObservable: nextSliceObservable,
            nextAccumulator: nextAccumulator,
            subscribe: subscribe,
        };
        // ======
        return compositionObservable;
        // ======
        function nextAccumulator(accumulatorFn) {
            accumulatorObservable.next(accumulatorFn);
        }
        function nextSlice(stateSlice) {
            stateSlices.next(stateSlice);
        }
        function nextSliceObservable(stateObservable) {
            stateObservables.next(stateObservable);
        }
        function subscribe() {
            var sub = compositionObservable.signal$.connect();
            sub.add(compositionObservable.state$.connect());
            sub.add(function () {
                accumulatorObservable.complete();
                stateObservables.complete();
                stateSlices.complete();
            });
            return sub;
        }
    }

    function isPromiseGuard(value) {
        return (value !== null &&
            value !== undefined &&
            typeof value.subscribe !== 'function' &&
            typeof value.then === 'function');
    }
    function isOperateFnArrayGuard(op) {
        if (!Array.isArray(op)) {
            return false;
        }
        return op.length > 0 && op.every(function (i) { return typeof i === 'function'; });
    }
    function isStringArrayGuard(op) {
        if (!Array.isArray(op)) {
            return false;
        }
        return op.length > 0 && op.every(function (i) { return typeof i === 'string'; });
    }
    function isIterableGuard(obj) {
        if (obj === null || obj === undefined) {
            return false;
        }
        return typeof obj[Symbol.iterator] === 'function';
    }
    function isKeyOf(k) {
        var typeofK = typeof k;
        return (k !== null &&
            k !== undefined &&
            ['string', 'symbol', 'number'].includes(typeofK));
    }
    function isObjectGuard(obj) {
        return (obj !== null &&
            obj !== undefined &&
            typeof obj === 'object' &&
            !Array.isArray(obj));
    }
    function isDefined(val) {
        return val !== null && val !== undefined;
    }
    function isStringAndFunctionTupleGuard(op) {
        return typeof op[0] === 'string' && typeof op[1] === 'function';
    }
    function isStringArrayFunctionAndOptionalObjectTupleGuard(op) {
        return (isStringArrayGuard(op[0]) &&
            typeof op[1] === 'function' &&
            (op[2] === undefined || typeof op[2] === 'object'));
    }

    function pipeFromArray(fns) {
        if (!fns) {
            return rxjs.noop;
        }
        if (fns.length === 1) {
            return fns[0];
        }
        return function piped(input) {
            return fns.reduce(function (prev, fn) { return fn(prev); }, input);
        };
    }

    /**
     * @description
     *
     * As it acts like the Observables `pipe` method, it accepts one or many RxJS operators as params.
     *
     * @example
     * import { Observable } from 'rxjs';
     * import { map } from 'rxjs/operators';
     * import { stateful } from 'rx-angular/state';
     *
     * const state$: Observable<{ name: string; items: string[] }>;
     * const derivation$ = state$.pipe(
     *   stateful(
     *     map(state => state.list.length),
     *     filter(length => length > 3)
     *   )
     * );
     *
     * @param {OperatorFunction<T, A>} op - one or multiple passed operator comma separated
     *
     * @docsPage stateful
     * @docsCategory operators
     */
    function stateful() {
        var optionalDerive = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            optionalDerive[_i] = arguments[_i];
        }
        return function (s) {
            return s.pipe(
            // distinct same base-state objects (e.g. a default emission of default switch cases, incorrect mutable handling
            // of data) @TODO evaluate benefits vs. overhead
            operators.distinctUntilChanged(), 
            // CUSTOM LOGIC HERE
            function (o) {
                if (isOperateFnArrayGuard(optionalDerive)) {
                    return o.pipe(pipeFromArray(optionalDerive));
                }
                return o;
            }, 
            // initial emissions, undefined is no base-state, pollution with skip(1)
            operators.filter(function (v) { return v !== undefined; }), 
            // distinct same derivation value
            operators.distinctUntilChanged(), 
            // reuse custom operations result for multiple subscribers and reemit the last calculated value.
            operators.shareReplay({ bufferSize: 1, refCount: true }));
        };
    }

    function safePluck(stateObject, keys) {
        // needed to match null and undefined conventions of RxAngular core components
        // safePluck(null) -> return null
        // safePluck(undefined) -> return undefined
        // safePluck(obj, ['wrongKey']) -> return undefined
        // safePluck(obj, ['correctKey']) -> return value of key
        // safePluck(obj, '') -> return undefined
        // safePluck(obj, null) -> return undefined
        if (!isDefined(stateObject)) {
            return stateObject;
        }
        if (!isDefined(keys)) {
            return undefined;
        }
        // sanitize keys -> keep only valid keys (string, number, symbol)
        var keysArr = (Array.isArray(keys) ? keys : [keys]).filter(function (k) { return isKeyOf(k); });
        if (keysArr.length === 0 ||
            !isObjectGuard(stateObject) ||
            Object.keys(stateObject).length === 0) {
            return undefined;
        }
        var prop = stateObject[keysArr.shift()];
        keysArr.forEach(function (key) {
            if (isObjectGuard(prop) && isKeyOf(key)) {
                prop = prop[key];
            }
        });
        return prop;
    }

    /**
     * @internal
     */
    function defaultCompare(oldVal, newVal) {
        return oldVal === newVal;
    }
    /**
     * @description
     *
     * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from
     * the previous item. Comparison will be done for each set key in the `keys` array.
     *
     * You can fine grain your distinct checks by providing a `KeyCompareMap` with those keys you want to compute
     * explicitly different
     *
     * The name `distinctUntilSomeChanged` was picked since it internally iterates over the `keys` and utilizes the
     * [some](https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Array/some) method in order to
     * compute if values are distinct or not.
     *
     * @example
     *
     * import { of } from 'rxjs';
     * import { distinctUntilSomeChanged } from 'rx-angular/state';
     *
     * interface Person {
     *    age: number;
     *    name: string;
     * }
     *
     * of(
     *   { age: 4, name: 'Hans'},
     *   { age: 7, name: 'Sophie'},
     *   { age: 5, name: 'Han Solo'},
     *   { age: 5, name: 'HanSophie'},
     * ).pipe(
     *   distinctUntilSomeChanged(['age', 'name']),
     * )
     * .subscribe(x => console.log(x));
     *
     * // displays:
     * // { age: 4, name: 'Hans'}
     * // { age: 7, name: 'Sophie'}
     * // { age: 5, name: 'Han Solo'}
     * // { age: 5, name: 'HanSophie'}
     *
     * @example
     * // An example with `KeyCompareMap`
     * import { of } from 'rxjs';
     * import { distinctUntilSomeChanged } from 'rxjs/operators';
     *
     * interface Person {
     *     age: number;
     *     name: string;
     *  }
     * const customComparison: KeyCompareMap<Person> = {
     *   name: (oldName, newName) => oldName.substring(0, 2) === newName.substring(0, 2)
     * };
     *
     * of(
     *     { age: 4, name: 'Hans'},
     *     { age: 7, name: 'Sophie'},
     *     { age: 5, name: 'Han Solo'},
     *     { age: 5, name: 'HanSophie'},
     *   ).pipe(
     *     distinctUntilSomeChanged(['age', 'name'], customComparison),
     *   )
     *   .subscribe(x => console.log(x));
     *
     * // displays:
     * // { age: 4, name: 'Hans' }
     * // { age: 7, name: 'Sophie' }
     * // { age: 5, name: 'Han Solo' }
     *
     * @param {K[]} keys String key for object property lookup on each item.
     * @param {KeyCompareMap<T>} [compare] Optional KeyCompareMap to explicitly define comparisons for some of the keys
     * @docsPage distinctUntilSomeChanged
     * @docsCategory operators
     */
    function distinctUntilSomeChanged(keys, keyCompareMap) {
        // default compare function applying === to every key
        var distinctCompare = function (oldState, newState) { return keys.some(function (key) { return !defaultCompare(safePluck(oldState, [key]), safePluck(newState, [key])); }); };
        // generate compare function respecting every case of provided keyCompareMap
        if (keyCompareMap !== undefined) {
            var compare_1 = function (key) {
                return keyCompareMap.hasOwnProperty(key) &&
                    keyCompareMap[key] !== undefined
                    ? keyCompareMap[key]
                    : defaultCompare;
            };
            distinctCompare = function (oldState, newState) {
                return keys.some(function (key) { return !compare_1(key)(safePluck(oldState, [key]), safePluck(newState, [key])); });
            };
        }
        return operators.distinctUntilChanged(function (oldV, newV) { return !distinctCompare(oldV, newV); });
    }

    /**
     * @description
     *
     * Returns an Observable that emits only the provided `keys` emitted by the source Observable. Each key will get
     * filtered to only emit _defined_ values as well as checked for distinct emissions.
     * Comparison will be done for each set key in the `keys` array.
     *
     * `selectSlice` will only emit _valid_ selections. A selection is _valid_ if every
     * selected key exists and is defined in the source Observable. This ensures that the `selectSlice`
     * operator will always return a complete slice with all values defined.
     *
     * You can fine grain your distinct checks by providing a `KeyCompareMap` with those keys you want to compute
     * explicitly different
     *
     * @example
     *
     * // An example with a custom comparison applied to each key
     * import { of } from 'rxjs';
     * import { selectSlice } from 'rx-angular/state';
     *
     *
     * const state$: Observable<MyState> = of(
     *  { title: 'myTitle', panelOpen: true},
     *  { title: 'myTitle2', panelOpen: true},
     *  { title: 'newTitle', panelOpen: true},
     *  { title: 'newTitle', panelOpen: false}
     * )
     * .pipe(
     *     selectSlice(['title', 'panelOpen']),
     *   )
     *   .subscribe(x => console.log(x));
     *
     * // displays:
     * //  { title: 'myTitle', panelOpen: true },
     * //  { title: 'myTitle2', panelOpen: true },
     * //  { title: 'newTitle', panelOpen: true },
     * //  { title: 'newTitle', panelOpen: false }
     *
     * @example
     *
     * import { of, Observable } from 'rxjs';
     * import { tap } from 'rxjs/operators';
     * import { selectSlice } from 'rx-angular/state';
     *
     * interface MyState {
     *    title: string;
     *    items: string[];
     *    panelOpen: boolean;
     * }
     * // Select items and title.
     * // apply custom compare logic for the items array
     * const customComparison: KeyCompareMap<MyState> = {
     *   items: (oldItems, newItems) => compareItems(oldItems, newItems)
     * };
     * const state$: Observable<MyState> = of(
     * { title: 'myTitle', items: ['foo', 'bar'], panelOpen: true },
     * { title: 'myTitle', items: ['foo', 'bar'], panelOpen: false },
     * { title: 'nextTitle', items: ['foo', 'baR'], panelOpen: true },
     * { title: 'nextTitle', items: ['fooRz', 'boo'], panelOpen: false },
     * );
     * const slice$ = state$.pipe(selectSlice(['title', 'items'], customComparison), tap(console.log)).subscribe();
     *
     * // displays:
     * // { title: 'myTitle', items: ['foo', 'bar'] }
     * // { title: 'nextTitle', items: ['foo', 'baR'] }
     * // { title: 'nextTitle', items: ['fooRz', 'boo'] }
     *
     * @param {(K)[]} keys - the array of keys which should be selected
     * @param {KeyCompareMap<{ [P in K]: T[P] }>} [keyCompareMap] Optional KeyCompareMap to provide custom compare logic
     * for some the keys
     * @docsPage selectSlice
     * @docsCategory operators
     */
    function selectSlice(keys, keyCompareMap) {
        return function (o$) { return o$.pipe(operators.filter(function (state) { return state !== undefined; }), operators.map(function (state) {
            // forward null
            if (state === null) {
                return null;
            }
            // an array of all keys which exist and are _defined_ in the state object
            var definedKeys = keys
                // filter out undefined properties e. g. {}, { str: undefined }
                .filter(function (k) { return state.hasOwnProperty(k) && state[k] !== undefined; });
            // we want to ensure to only emit _valid_ selections
            // a selection is _valid_ if every selected key exists and has a value:
            // {} => selectSlice(['foo']) => no emission
            // {str: 'test'} => selectSlice([]) => no emission
            // {str: 'test'} => selectSlice(['notPresent']) => no emission
            // {str: 'test'} => state.select(selectSlice([])) => no emission
            // {str: 'test'} => state.select(selectSlice(['notPresent'])) => no emission
            // {str: undefined} => state.select(selectSlice(['str'])) => no emission
            // {str: 'test', foo: undefined } => state.select(selectSlice(['foo'])) => no emission
            if (definedKeys.length < keys.length) {
                return undefined;
            }
            // create the selected slice
            return definedKeys
                .reduce(function (vm, key) {
                vm[key] = state[key];
                return vm;
            }, {});
        }), operators.filter(function (v) { return v !== undefined; }), distinctUntilSomeChanged(keys, keyCompareMap)); };
    }

    /**
     * @internal
     */
    function select() {
        var opOrMapFn = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            opOrMapFn[_i] = arguments[_i];
        }
        return function (state$) {
            if (!opOrMapFn || opOrMapFn.length === 0) {
                return state$.pipe(stateful());
            }
            else if (isStringAndFunctionTupleGuard(opOrMapFn)) {
                return state$.pipe(stateful(operators.map(function (s) { return opOrMapFn[1](s[opOrMapFn[0]]); })));
            }
            else if (isStringArrayFunctionAndOptionalObjectTupleGuard(opOrMapFn)) {
                return state$.pipe(selectSlice(opOrMapFn[0], opOrMapFn[2]), stateful(operators.map(opOrMapFn[1])));
            }
            else if (isStringArrayGuard(opOrMapFn)) {
                return state$.pipe(stateful(operators.pluck.apply(void 0, __spreadArray([], __read(opOrMapFn)))));
            }
            else if (isOperateFnArrayGuard(opOrMapFn)) {
                return state$.pipe(stateful(pipeFromArray(opOrMapFn)));
            }
            else {
                throw new Error('wrong params passed to select');
            }
        };
    }

    function createSideEffectObservable(stateObservables) {
        if (stateObservables === void 0) { stateObservables = new rxjs.Subject(); }
        var effects$ = rxjs.merge(stateObservables.pipe(operators.mergeAll(), operators.observeOn(rxjs.queueScheduler)));
        function nextEffectObservable(effect$) {
            stateObservables.next(effect$);
        }
        function subscribe() {
            return effects$.subscribe();
        }
        return {
            effects$: effects$,
            nextEffectObservable: nextEffectObservable,
            subscribe: subscribe
        };
    }

    /**
     * Generated bundle index. Do not edit.
     */

    exports.createAccumulationObservable = createAccumulationObservable;
    exports.createSideEffectObservable = createSideEffectObservable;
    exports.distinctUntilSomeChanged = distinctUntilSomeChanged;
    exports.isDefined = isDefined;
    exports.isKeyOf = isKeyOf;
    exports.isObjectGuard = isObjectGuard;
    exports.isOperateFnArrayGuard = isOperateFnArrayGuard;
    exports.isStringAndFunctionTupleGuard = isStringAndFunctionTupleGuard;
    exports.isStringArrayFunctionAndOptionalObjectTupleGuard = isStringArrayFunctionAndOptionalObjectTupleGuard;
    exports.isStringArrayGuard = isStringArrayGuard;
    exports.pipeFromArray = pipeFromArray;
    exports.safePluck = safePluck;
    exports.select = select;
    exports.selectSlice = selectSlice;
    exports.stateful = stateful;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=state-selections.umd.js.map
