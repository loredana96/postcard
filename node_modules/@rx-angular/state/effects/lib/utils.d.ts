import { MonoTypeOperatorFunction, Observable } from 'rxjs';
import { HookProps, OnDestroy$, SingleShotProps } from './model';
export declare function isSingleShotHookNameGuard<T>(name: unknown): name is keyof SingleShotProps;
/**
 * This is an operator that is used to listen to Angular lifecycle hooks.
 * It plucks a defined lefe cycle name `HookProps` and forwards values for the particular value and in the behavior of the hook e.g. single shot
 *
 * @param name
 */
export declare function toHook<H extends keyof HookProps>(name: H): (o$: Observable<HookProps>) => Observable<HookProps[H]>;
/**
 * This operator can be used to take instances that implements `OnDestroy$` and unsubscribes from the given Observable when the instances
 * `onDestroy$` Observable emits.
 *
 * @param instanceWithLifecycle
 */
export declare function untilDestroyed<V>(instanceWithLifecycle: OnDestroy$): MonoTypeOperatorFunction<V>;
//# sourceMappingURL=utils.d.ts.map